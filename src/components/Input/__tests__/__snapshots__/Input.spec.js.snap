// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input. Should be render <Input />. 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    className="class"
    focus={false}
    label="E-mail"
    onChange={[MockFunction]}
    onSubmit={null}
    padding="10px"
    placeholder=""
    refInput={
      Object {
        "current": null,
      }
    }
    required={true}
    search={false}
    type="text"
    width="100%"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.label>
          E-mail
        </styled.label>,
        <input
          autoFocus={false}
          className="class"
          padding="10px"
          placeholder=""
          required={true}
          type="text"
          width="100%"
        />,
        false,
      ],
      "className": "class",
      "focus": false,
      "label": "E-mail",
      "onChange": [MockFunction],
      "onSubmit": null,
      "padding": "10px",
      "placeholder": "",
      "refInput": Object {
        "current": null,
      },
      "required": true,
      "search": false,
      "type": "text",
      "width": "100%",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "E-mail",
        },
        "ref": null,
        "rendered": "E-mail",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "autoFocus": false,
          "className": "class",
          "padding": "10px",
          "placeholder": "",
          "required": true,
          "type": "text",
          "width": "100%",
        },
        "ref": Object {
          "current": null,
        },
        "rendered": null,
        "type": "input",
      },
      false,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.label>
            E-mail
          </styled.label>,
          <input
            autoFocus={false}
            className="class"
            padding="10px"
            placeholder=""
            required={true}
            type="text"
            width="100%"
          />,
          false,
        ],
        "className": "class",
        "focus": false,
        "label": "E-mail",
        "onChange": [MockFunction],
        "onSubmit": null,
        "padding": "10px",
        "placeholder": "",
        "refInput": Object {
          "current": null,
        },
        "required": true,
        "search": false,
        "type": "text",
        "width": "100%",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "E-mail",
          },
          "ref": null,
          "rendered": "E-mail",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "autoFocus": false,
            "className": "class",
            "padding": "10px",
            "placeholder": "",
            "required": true,
            "type": "text",
            "width": "100%",
          },
          "ref": Object {
            "current": null,
          },
          "rendered": null,
          "type": "input",
        },
        false,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
